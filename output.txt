Script started on Sun 28 Jan 2018 08:29:53 PM PST
tranle@uw1-320-06:~/Desktop/Ass2_BinarySearchTree$ g++ -std=c++14 -g -Wall -Wextra ass2.cpp -o runclear[Kg++ -std=c++14 -g -Wall -Wextra ass2.cpp -o runclear[Kg++ -std=c++14 -g -Wall -Wextra ass2.cpp -o run[K[K[Kass2
tranle@uw1-320-06:~/Desktop/Ass2_BinarySearchTree$ valgrind ./ass2
==9913== Memcheck, a memory error detector
==9913== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==9913== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==9913== Command: ./ass2
==9913== 
bst2 is empty (1): 1
Adding d again (0): 0
Does the tree contain g (1): 1
bst1 tree here:
        g
            d
# of nodes in bst1 (2): 2
Height of bst1 (2): 2
OK: bst1 != bst2
bst1 tree here:
            k
        g
            d
bst2 tree here:
            k
        g
            d
OK: bst1 == bst2
OK: bst1 contains d
OK: bst1 does not contain x
OK: adding g second time returns false
OK: bst3 does not contain x
OK: bst3 contains g
bst4 tree here:
            k
        g
            d
OK: bst4 == bst2
bst4 is empty: 
bst4 does not contain b (0): 0
Inserting array[4, 5, 6, 7, 8, 10] into bst5: 
                10
            8
                7
        6
                5
            4
bst6 before rebalance: 
                                7
                            6
                        5
                    4
                3
            2
        1
bst6 after rebalance: 
                7
            6
                5
        4
                3
            2
                1
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 6
Enter multiple strings: a b c d e f g
Added a
Added b
Added c
Added d
Added e
Added f
Added g
                                g
                            f
                        e
                    d
                c
            b
        a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 5
                g
            f
                e
        d
                c
            b
                a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 1 1
Enter a string: z
Added z
                    z
                g
            f
                e
        d
                c
            b
                a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 1
Enter a string: h
Added h
                    z
                        h
                g
            f
                e
        d
                c
            b
                a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 5
                    z
                h
            g
                f
        e
                    d
                c
            b
                a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 3
a b c d e f g h z 
                    z
                h
            g
                f
        e
                    d
                c
            b
                a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 4
Height: 4
Number of nodes: 9
                    z
                h
            g
                f
        e
                    d
                c
            b
                a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 2
Enter a string: z
Found z
                    z
                h
            g
                f
        e
                    d
                c
            b
                a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 10
treeMenuInt
1. Add
10. Exit
>> 1
Enter a number: 3' 
Added 3
        3
treeMenuInt
1. Add
10. Exit
>> 1
Enter a number: 2
Added 2
        3
            2
treeMenuInt
1. Add
10. Exit
>> 1
Enter a number: 4
Added 4
            4
        3
            2
treeMenuInt
1. Add
10. Exit
>> 1
Enter a number: 5
Added 5
                5
            4
        3
            2
treeMenuInt
1. Add
10. Exit
>> 10
==9913== 
==9913== HEAP SUMMARY:
==9913==     in use at exit: 72,704 bytes in 1 blocks
==9913==   total heap usage: 72 allocs, 71 frees, 79,230 bytes allocated
==9913== 
==9913== LEAK SUMMARY:
==9913==    definitely lost: 0 bytes in 0 blocks
==9913==    indirectly lost: 0 bytes in 0 blocks
==9913==      possibly lost: 0 bytes in 0 blocks
==9913==    still reachable: 72,704 bytes in 1 blocks
==9913==         suppressed: 0 bytes in 0 blocks
==9913== Rerun with --leak-check=full to see details of leaked memory
==9913== 
==9913== For counts of detected and suppressed errors, rerun with: -v
==9913== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
tranle@uw1-320-06:~/Desktop/Ass2_BinarySearchTree$ exit

Script done on Sun 28 Jan 2018 08:37:51 PM PST
